# sql_evaluation_library/src/sql_eval_lib/models/adapters.py
import os
import time
from openai import OpenAI, APIError, RateLimitError
from .interface import ModelInterface # Renamed from interfaces.py

class DummyModelAdapter(ModelInterface):
    """
    A dummy model adapter for testing the evaluation pipeline.
    It returns a fixed SQL query or the ground truth SQL if provided in metadata.
    """
    def __init__(self, fixed_query: str = "SELECT id, name FROM dummy_table WHERE status = 'active';"):
        self.fixed_query = fixed_query
        print("DummyModelAdapter initialized.")

    def get_sql(self, sql_prompt: str, sql_context: str, metadata: dict = None) -> str:
        """
        Returns a dummy SQL query.

        If 'ground_truth_sql' is present in the metadata, it returns that.
        Otherwise, it returns the fixed_query defined during initialization.
        """
        print(f"DummyModelAdapter.get_sql called with prompt: '{sql_prompt[:50]}...'")
        if metadata and "ground_truth_sql" in metadata:
            print("DummyModelAdapter: Returning ground_truth_sql from metadata.")
            return metadata["ground_truth_sql"]
        
        print(f"DummyModelAdapter: Returning fixed query: {self.fixed_query}")
        return self.fixed_query

class OpenAIModelAdapter(ModelInterface):
    """
    Model adapter for interacting with OpenAI's language models (e.g., GPT-3.5 Turbo, GPT-4)
    to generate SQL queries.
    """
    def __init__(self, api_key: str = None, model_name: str = "gpt-3.5-turbo"):
        """
        Initializes the OpenAIModelAdapter.

        Args:
            api_key (str, optional): OpenAI API key. If None, it will try to use the
                                     OPENAI_API_KEY environment variable.
            model_name (str, optional): The name of the OpenAI model to use.
                                        Defaults to "gpt-3.5-turbo".
        """
        if api_key is None:
            api_key = os.environ.get("OPENAI_API_KEY")
        
        if not api_key:
            raise ValueError("OpenAI API key not provided and not found in OPENAI_API_KEY environment variable.")
            
        self.client = OpenAI(api_key=api_key)
        self.model_name = model_name
        print(f"OpenAIModelAdapter initialized with model: {self.model_name}")

    def get_sql(self, sql_prompt: str, sql_context: str, metadata: dict = None) -> str:
        """
        Generates an SQL query using the configured OpenAI model.

        Args:
            sql_prompt (str): The natural language question.
            sql_context (str): The database schema context (CREATE TABLE statements).
            metadata (dict, optional): Additional metadata. Not directly used by this
                                       adapter for query generation but available.

        Returns:
            str: The SQL query generated by the OpenAI model, or an error message string.
        """
        print(f"OpenAIModelAdapter.get_sql called for model {self.model_name} with prompt: '{sql_prompt[:50]}...'")
        
        system_message_content = f"""
You are an expert Text-to-SQL model. Your task is to generate a syntactically correct SQL query
that answers the given natural language question, based on the provided database schema.
Database Schema (CREATE TABLE statements):
{sql_context}

Ensure the generated SQL query is compatible with standard SQL, primarily SQLite syntax where possible.
Only output the SQL query. Do not include any explanations, comments, or markdown formatting like ```sql ... ```.
Just the raw SQL query.
"""
        user_message_content = f"Natural Language Question: {sql_prompt}"

        max_retries = 3
        retry_delay = 5  # seconds
        for attempt in range(max_retries):
            try:
                response = self.client.chat.completions.create(
                    model=self.model_name,
                    messages=[
                        {"role": "system", "content": system_message_content},
                        {"role": "user", "content": user_message_content}
                    ],
                    temperature=0.2,  # Lower temperature for more deterministic SQL generation
                    # max_tokens can be set if needed
                )
                
                generated_sql = response.choices[0].message.content.strip()
                # Clean up potential markdown formatting if the model still adds it
                if generated_sql.startswith("```sql"):
                    generated_sql = generated_sql[len("```sql"):].strip()
                if generated_sql.endswith("```"):
                    generated_sql = generated_sql[:-len("```")].strip()
                
                print(f"OpenAIModelAdapter: Successfully generated SQL: {generated_sql[:100]}...")
                return generated_sql

            except RateLimitError as e:
                print(f"OpenAI API rate limit error: {e}. Attempt {attempt + 1} of {max_retries}. Retrying in {retry_delay}s...")
                time.sleep(retry_delay)
            except APIError as e:
                print(f"OpenAI API error: {e}. Attempt {attempt + 1} of {max_retries}. Retrying in {retry_delay}s...")
                time.sleep(retry_delay)
            except Exception as e:
                error_message = f"An unexpected error occurred calling OpenAI API: {e}"
                print(error_message)
                return f"ERROR: {error_message}" # Return error message as string

        final_error_message = f"Failed to get response from OpenAI after {max_retries} retries."
        print(final_error_message)
        return f"ERROR: {final_error_message}" # Return final error message

